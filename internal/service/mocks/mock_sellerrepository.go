// Code generated by MockGen. DO NOT EDIT.
// Source: ejaw_test_case/internal/service (interfaces: SellerRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "ejaw_test_case/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSellerRepository is a mock of SellerRepository interface.
type MockSellerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSellerRepositoryMockRecorder
}

// MockSellerRepositoryMockRecorder is the mock recorder for MockSellerRepository.
type MockSellerRepositoryMockRecorder struct {
	mock *MockSellerRepository
}

// NewMockSellerRepository creates a new mock instance.
func NewMockSellerRepository(ctrl *gomock.Controller) *MockSellerRepository {
	mock := &MockSellerRepository{ctrl: ctrl}
	mock.recorder = &MockSellerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellerRepository) EXPECT() *MockSellerRepositoryMockRecorder {
	return m.recorder
}

// AddSeller mocks base method.
func (m *MockSellerRepository) AddSeller(arg0 domain.Seller) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSeller", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSeller indicates an expected call of AddSeller.
func (mr *MockSellerRepositoryMockRecorder) AddSeller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSeller", reflect.TypeOf((*MockSellerRepository)(nil).AddSeller), arg0)
}

// DeleteSeller mocks base method.
func (m *MockSellerRepository) DeleteSeller(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeller", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeller indicates an expected call of DeleteSeller.
func (mr *MockSellerRepositoryMockRecorder) DeleteSeller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeller", reflect.TypeOf((*MockSellerRepository)(nil).DeleteSeller), arg0)
}

// GetAllSellers mocks base method.
func (m *MockSellerRepository) GetAllSellers() ([]domain.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSellers")
	ret0, _ := ret[0].([]domain.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSellers indicates an expected call of GetAllSellers.
func (mr *MockSellerRepositoryMockRecorder) GetAllSellers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSellers", reflect.TypeOf((*MockSellerRepository)(nil).GetAllSellers))
}

// GetSeller mocks base method.
func (m *MockSellerRepository) GetSeller(arg0 int) (*domain.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeller", arg0)
	ret0, _ := ret[0].(*domain.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeller indicates an expected call of GetSeller.
func (mr *MockSellerRepositoryMockRecorder) GetSeller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeller", reflect.TypeOf((*MockSellerRepository)(nil).GetSeller), arg0)
}

// GetSellerByName mocks base method.
func (m *MockSellerRepository) GetSellerByName(arg0 string) (*domain.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerByName", arg0)
	ret0, _ := ret[0].(*domain.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerByName indicates an expected call of GetSellerByName.
func (mr *MockSellerRepositoryMockRecorder) GetSellerByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerByName", reflect.TypeOf((*MockSellerRepository)(nil).GetSellerByName), arg0)
}

// UpdateSeller mocks base method.
func (m *MockSellerRepository) UpdateSeller(arg0 domain.Seller) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeller", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeller indicates an expected call of UpdateSeller.
func (mr *MockSellerRepositoryMockRecorder) UpdateSeller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeller", reflect.TypeOf((*MockSellerRepository)(nil).UpdateSeller), arg0)
}
